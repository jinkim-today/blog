class f{constructor(){this.cache=new Map,this.baseUrl="/portfolio"}async getAllPortfolioProjects(){const e="all-projects";if(this.cache.has(e))return this.cache.get(e);const t=[],o=["en","ko"];for(const r of o){const m=await this.getPortfolioProjectsByLanguage(r);t.push(...m)}return this.cache.set(e,t),t}async getPortfolioProjectsByLanguage(e){const t=`projects-${e}`;if(this.cache.has(t))return this.cache.get(t);const o=[];try{const r=await this.getAvailableProjectFiles(e);for(const m of r){const a=await this.loadProjectFromFile(e,m);a&&o.push(a)}}catch(r){console.warn(`No projects found for language: ${e}`,r)}return this.cache.set(t,o),o}async getPortfolioProject(e,t){return(await this.getPortfolioProjectsByLanguage(t)).find(r=>r.slug===e)}async getPortfolioProjectByLanguage(e,t){return this.getPortfolioProject(e,t)}async getAvailableProjectFiles(e){const o=this.generatePotentialProjectFilenames().map(async a=>{try{if((await fetch(`${this.baseUrl}/${e}/${a}`)).ok)return a}catch{}return null});return(await Promise.all(o)).filter(a=>a!==null)}generatePotentialProjectFilenames(){const e=[],t=["ecommerce-platform.md","online-store.md","marketplace.md","crm-system.md","inventory-management.md","pos-system.md","booking-platform.md","payment-gateway.md","web-app.md","dashboard.md","admin-panel.md","user-portal.md","content-management.md","blog-platform.md","social-network.md","forum.md","mobile-app.md","ios-app.md","android-app.md","desktop-app.md","cross-platform-app.md","react-native-app.md","flutter-app.md","electron-app.md","ai-chatbot.md","ml-model.md","data-analysis.md","recommendation-engine.md","image-recognition.md","nlp-project.md","predictive-analytics.md","computer-vision.md","kubernetes-deployment.md","ci-cd-pipeline.md","monitoring-system.md","cloud-migration.md","docker-setup.md","terraform-infrastructure.md","automation-tools.md","backup-system.md","game-development.md","mobile-game.md","web-game.md","unity-game.md","puzzle-game.md","arcade-game.md","educational-game.md","simulation-game.md","api-gateway.md","microservice.md","rest-api.md","graphql-api.md","webhook-service.md","integration-platform.md","data-sync.md","real-time-api.md","code-generator.md","build-tool.md","testing-framework.md","deployment-tool.md","cli-tool.md","vscode-extension.md","npm-package.md","library.md","project-1.md","project-2.md","project-3.md","project-4.md","project-5.md","portfolio-1.md","portfolio-2.md","portfolio-3.md","main-project.md","featured-project.md","latest-project.md","personal-project.md","client-project.md","open-source.md","index.md","overview.md","showcase.md","demo.md"];return e.push(...t),Array.from(new Set(e))}async loadProjectFromFile(e,t){try{const o=`${this.baseUrl}/${e}/${t}`,r=await fetch(o);if(!r.ok)return null;const a=(await r.text()).match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);if(!a)return console.warn(`Invalid markdown format in ${o}`),null;const i=a[1],p=a[2],s={};return i.split(`
`).forEach(d=>{const l=d.indexOf(":");if(l===-1)return;const c=d.substring(0,l).trim();let n=d.substring(l+1).trim();if(n.startsWith('"')&&n.endsWith('"')&&(n=n.slice(1,-1)),n.startsWith("[")&&n.endsWith("]")){const u=n.slice(1,-1).split(",").map(g=>g.trim().replace(/"/g,""));s[c]=u}else c==="featured"?s[c]=n.toLowerCase()==="true":s[c]=n}),{slug:t.replace(".md",""),title:s.title||"Untitled Project",summary:s.summary||"",image:s.image||"",status:s.status||"completed",technologies:s.technologies||[],demoUrl:s.demoUrl,githubUrl:s.githubUrl,featured:s.featured||!1,content:p}}catch(o){return console.error(`Error loading project ${e}/${t}:`,o),null}}clearCache(){this.cache.clear()}}const j=new f;export{j as dynamicPortfolioService};
